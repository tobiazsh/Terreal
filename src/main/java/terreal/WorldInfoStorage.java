package terreal;

import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.server.world.ServerWorld;
import terreal.config.WorldGenerationConfig;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Stores the seed, world and other important stuff
 */
public class WorldInfoStorage {

    private static final Path CONFIG_FILE = Path.of("terreal", "config.toml");

    private long seed;
    private ServerWorld world;
    private Path worldDirectory;
    WorldGenerationConfig currentConfig;

    public void setCurrent(ServerWorld world) {
        this.world = world;
        this.seed = world.getSeed();
        this.worldDirectory = world.getServer().session.getWorldDirectory(world.getRegistryKey());
    }

    public ServerWorld getServerWorld() {
        return world;
    }

    public long getSeed() {
        return seed;
    }

    public Path getWorldDirectory() {
        return worldDirectory;
    }

    /**
     * Searches the world directory for the world generation config file generated by Terreal. If none found, Terreal will generate a new one out of the current config in the config directory.
     * If none found there, Terreal will use the default config and save that to the world.
     */
    public void searchAndInitConfig() throws IOException {
        if (worldHasConfigFile()) {
            this.currentConfig = WorldGenerationConfig.parseFile(getWorldDirectory().resolve(CONFIG_FILE).toFile(), seed);
        } else {
            WorldGenerationConfig config = globalConfigExists()
                    ? WorldGenerationConfig.parseFile(FabricLoader.getInstance().getConfigDir().toAbsolutePath().resolve(CONFIG_FILE).toFile(), seed)
                    : WorldGenerationConfig.getDefault(seed);

            Path configFile = getWorldDirectory().toAbsolutePath().resolve(CONFIG_FILE);
            Files.createDirectories(configFile.getParent());
            Files.createFile(configFile);
            config.writeFile(configFile.toFile()); // Create a config file in the world directory

            this.currentConfig = config;
        }
    }

    private boolean worldHasConfigFile() {
        return Files.exists(getWorldDirectory().toAbsolutePath().resolve(CONFIG_FILE));
    }

    private boolean globalConfigExists() {
        return Files.exists(FabricLoader.getInstance().getConfigDir().toAbsolutePath().resolve(CONFIG_FILE));
    }
}
